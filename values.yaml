ingress: &ingress {}
ingress-test: *ingress

backendImage: &backendImage
  repository: camptocamp/merginmaps-server
  tag: "2024.2.2-c2c.3"

frontendImage: &frontendImage
  repository: camptocamp/merginmaps-frontend
  tag: "2024.2.2-c2c.3"

envVariables: &envVariables
  COLLECT_STATISTICS:
    value: 'false'
  DEFAULT_STORAGE_SIZE:
    value: '100000000'
  GEODIFF_LOGGER_LEVEL:
    value: '2'
  GLOBAL_READ:
    value: 'false'
  GLOBAL_STORAGE:
    value: '210748364800'
  GLOBAL_WORKSPACE:
    value: mergin
  GLOBAL_WRITE:
    value: 'false'
  LOCAL_PROJECTS:
    value: /data
  MAINTENANCE_FILE:
    value: /data/MAINTENANCE
  MAX_CHUNK_SIZE:
    value: '10485760'
  MAIL_SUPPRESS_SEND:
    value: '1'
  PORT:
    value: '5000'
  TEMP_DIR:
    value: /data/tmp
  USER_SELF_REGISTRATION:
    value: '1'
  USE_X_ACCEL:
    value: 'true'
  VERSION:
    value: 2024.2.2

global:
  image:
    pullPolicy: Always

pvc:
  storageClass: azurefile-csi-nobrl
  size: 200Gi
  accessModes:
  - ReadWriteMany

frontend:
  ingress:
    enabled: false
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      ingress.kubernetes.io/ssl-redirect: 'true'
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: 'true'

  services:
    frontend:
      enabled: true
      replicaCount: 1

      podLabels:
        team: gmf

      ingress:
        enabled: false
        path: /

      service:
        type: ClusterIP
        servicePort: 8080
        ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: 8080

      containers:
        frontend:
          image: *frontendImage

          readinessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 20

          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi

          ports:
            http:
              containerPort: 8080
              protocol: TCP

          volumeMounts:
            /data:
              name: datadir
            /etc/nginx/conf.d:
              name: nginx-conf

      volumes:
        datadir:
          persistentVolumeClaim:
            claimName: merginmaps-data
        nginx-conf:
          configMap:
            name: merginmaps-nginx-conf

server:
  ingress:
    enabled: false

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 901
    runAsGroup: 901
    fsGroup: 901
    fsGroupChangePolicy: OnRootMismatch

  services:
    server:
      enabled: true
      replicaCount: 1

      podLabels:
        team: gmf

      ingress:
        enabled: false

      service:
        type: ClusterIP
        servicePort: 5000
        ports:
        - name: http
          port: 5000
          protocol: TCP
          targetPort: 5000

      containers:
        server-gunicorn:
          image: *backendImage
          command: ["gunicorn", "--config", "config.py", "application:application"]

          env: *envVariables

          readinessProbe:
            httpGet:
              path: /ping
              port: 5000
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 20

          # FIXME: Temporarily disabled because current server image don't have cURL
          # livenessProbe:
          #   exec:
          #     command:
          #     - curl
          #     - -X POST
          #     - 0.0.0.0:5000/alive
          #   initialDelaySeconds: 10
          #   timeoutSeconds: 1
          #   periodSeconds: 20

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 1
              memory: 2Gi

          ports:
            http:
              containerPort: 5000
              protocol: TCP

          volumeMounts:
            /data:
              name: datadir

        celery-beat:
          image: *backendImage
          command: ["celery", "-A", "application.celery", "beat", "--loglevel", "info"]

          env: *envVariables

          livenessProbe:
            exec:
              command:
              - sh
              - '-c'
              - celery -A application.celery inspect ping | grep -q OK
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi

        celery-worker:
          image: *backendImage
          command: ["celery", "-A", "application.celery", "worker", "--loglevel", "info"]

          env: *envVariables

          livenessProbe:
            exec:
              command:
              - sh
              - '-c'
              - celery -A application.celery inspect ping | grep -q OK
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi

      volumes:
        datadir:
          persistentVolumeClaim:
            claimName: merginmaps-data

